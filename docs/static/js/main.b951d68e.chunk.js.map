{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","cats","type","value","onChange","target","getGifs","category","a","api","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","categories","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,gBAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,sBAAMC,SAPe,SAACC,GACtBA,EAAMC,iBACNN,GAAe,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACvCJ,EAAc,KAId,SACE,uBACEK,KAAK,OACLC,MAAOP,EACPQ,SAfyB,SAACL,GAC9BF,EAAcE,EAAMM,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAGEI,MAAOF,GAHT,cAGfG,EAHe,gBAIEA,EAASC,OAJX,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QAVhB,kBAcdL,GAdc,4CAAH,sDCEPQ,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,MAAWC,GAAU,EAAdF,GAAc,EAAVE,KAEvC,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAKA,QCHEQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAGxB,ECJ0B,SAAEA,GAE5B,MAA4BZ,mBAAS,CACnCmB,KAAM,GACNc,SAAS,IAFX,mBAAQC,EAAR,KAAeC,EAAf,KAiBA,OAZAC,qBAAW,WAETzB,EAASC,GACNyB,MAAM,SAAAX,GACLS,EAAS,CACPhB,KAAMO,EACNO,SAAS,SAId,CAAErB,IAEEsB,EDf0BI,CAAc1B,GAAlCc,EAAb,EAAQP,KAAac,EAArB,EAAqBA,QAErB,OACE,qCACE,6BAAMrB,IAEJqB,GAAW,yCACb,qBAAKJ,UAAU,YAAf,SAIMH,EAAOL,KAAK,SAAAkB,GAAK,OAAI,cAAC,EAAD,eAAgCA,GAAdA,EAAMhB,aEgB1CiB,EA9BM,WAGnB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAQA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEI0C,EAAWpB,KAAK,SAACT,EAAU8B,GAAX,OACd,cAAC,EAAD,CAA0B9B,SAAWA,GAAtBA,Y,MClB3B+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b951d68e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ( {setCategories} ) => {\n\n  const [inputValue, setInputValue] = useState('Escribe algo');\n  \n  const handleChangeValueInput = (event) => {\n    setInputValue(event.target.value)\n  }\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n    setCategories( cats => [inputValue, ...cats]);\n    setInputValue('');\n  }\n\n  return (\n    <form onSubmit={ handleOnSubmit }>   \n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={ handleChangeValueInput }\n      />\n    </form>\n  )\n}\n\n\nCategoryAdd.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\n","export const getGifs = async ( category ) => {\n  const api = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HJXGoYw6zBFnWg5W3g25mTVu6Ya1Nb3Y`;\n\n  const response = await fetch( api );\n  const { data } = await response.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  })\n\n  return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, id, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  //le cambio el nombre a data por images\n  const { data:images, loading } = useFetchGifs( category );\n  \n  return (\n    <> \n      <h3>{ category }</h3>\n\n      { loading && <p>Cargando</p> }\n      <div className='card-grid'>\n      \n          { \n            //image es un objeto asi que lo puedes desestructurar\n            images.map( image => <GifGridItem key={image.id} {...image} /> ) \n          }\n      \n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n  const [ state, setState ] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    \n    getGifs( category )\n      .then( images => {\n        setState({\n          data: images,\n          loading: false\n        });\n      })\n\n  }, [ category ])\n\n  return state;\n\n}","import React, { useState } from 'react';\nimport { CategoryAdd } from './components/CategoryAdd';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  //setCategories es un funciÃ³n!!!!\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => {\n  //   //mantenemos las categorias actuales y le metemos otra\n  //   //setCategories([...categories,'Nueva Serie']);\n  //   //setCategories( cats => [...cats,'Nueva Serie']);\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <CategoryAdd setCategories={ setCategories }/>\n      <hr />\n      \n\n      <ol>\n        { \n          categories.map( (category, index) => \n            <GifGrid key={ category } category={ category }/>\n          )\n        }\n      </ol>\n\n    </>\n  )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}